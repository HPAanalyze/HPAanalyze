---
title: "Human Protein Atlas data analysis"
output:
  pdf_document: 
    latex_engine: xelatex
  html_notebook: default
---

# Load library

```{r message= FALSE}
library('tidyverse')
library('reshape2')
library('RColorBrewer')
```


# Download data files

```{r message = FALSE}
hpa_downloaded_data <- hpa_download('histology')
```


# Import data files

```{r message=FALSE}
# import data for normal tissues
normal_tissue <- read_tsv('datafiles//normal_tissue.tsv')
  # tidy column names
  colnames(normal_tissue) <- c('ensembl', 'gene', 'tissue', 'cell_type', 'level', 'reliability')

# import data for cancer tissues 
pathology <- read_tsv('datafiles//pathology.tsv')
  # tidy column names
  colnames(pathology) <- c('ensembl', 'gene', 'cancer', 'high', 'medium', 'low', 'not_detected', 
                           'prognostic_favorable', 'unprognostic_favorable',
                           'prognostic_unfavorable', 'unprognostic_unfavorable')

# import data for subcellular location of expression
subcellular_location <- read_tsv('datafiles//subcellular_location.tsv')
  # tidy column names
  colnames(subcellular_location) <- c('ensembl', 'gene', 'reliability', 'enhanced', 'supported',
                                      'approved', 'uncertain', 'single_cell_var_intensity',
                                      'single_cell_var_spatial', 'cell_cycle_dependency', 'go_id')
```


# List available parameters of interest

```{r}
# List of tissue
tissue_list <- unique(normal_tissue[['tissue']])

# List of normal cell types
norm_cell_list <- unique(normal_tissue[['cell_type']])

# List of cancers
cancer_list <- unique(pathology[['cancer']])

# List of subcellular locations
subcell_loc_list <- unique(subcellular_location[['approved']]) %>%
  strsplit(';') %>% unlist() %>% unique() %>% na.omit() %>% as.vector()

print(list('Tissue' = tissue_list, 
           'Normal_cell_type' = norm_cell_list, 
           'Cancer' = cancer_list,
           'Subcellular_location' = subcell_loc_list))
```


# Create queries

```{r}
target_gene <- c('GCH1', 'PTS', 'SPR', 'DHFR')
target_tissue <- c('cerebral cortex', 'cerebellum', 'hippocampus', 'hypothalamus')
target_cell_type <- c('glial cells')
#target_cancer <- c('glioma', 'prostate cancer')
target_cancer <- cancer_list
target_subcell_loc <- c('Cytosol')
```


# Subsets for normal tissues
Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays. The tab-separated file includes Ensembl gene identifier ("Gene"), tissue name ("Tissue"), annotated cell type ("Cell type"), expression value ("Level"), and the gene reliability of the expression value ("Reliability"). 

```{r}
normal_tissue_subset <- normal_tissue %>%
  filter(gene %in% target_gene) %>%
  filter(tissue %in% target_tissue) %>%
#  filter(cell_type %in% target_cell_type) %>%
  print()
```


# Visualize expression of target genes in tissues of interest

```{r}
level_colors = c('Not detected' = '#ffffb2', 'Low' = '#fecc5c', 'Medium' = '#fd8d3c', 'High' = '#e31a1c')

normal_tissue_subset %>%
  mutate(tissue_cell = paste0(tissue, ' / ', cell_type),
         level = factor(level, levels = c('High', 'Medium', 'Low', 'Not detected'))) %>%
#  print() %>%
  ggplot(aes(x = gene, y = tissue_cell)) +
    geom_tile(aes(fill = level)) +
    scale_x_discrete(limits = target_gene) +
    scale_fill_manual(values = level_colors) +
#    scale_fill_brewer(palette = 'YlOrRd', direction = -1) +
    ylab('Tissue / Cell')
  
```


# Subsets for cancers
Staining profiles for proteins in human tumor tissue based on immunohistochemisty using tissue micro arrays and log-rank P value for Kaplan-Meier analysis of correlation between mRNA expression level and patient survival. The tab-separated file includes Ensembl gene identifier ("Gene"), gene name ("Gene name"), tumor name ("Cancer"), the number of patients annotated for different staining levels ("High", "Medium", "Low" & "Not detected") and log-rank p values for patient survival and mRNA correlation ("prognostic - favourable", "unprognostic - favourable", "prognostic - unfavourable", "unprognostic - unfavourable").

```{r}
pathology_subset <- pathology %>%
  filter(gene %in% target_gene) %>%
  filter(cancer %in% target_cancer) %>%
  print()
```


# Visualize expression of target genes in cancers of interest


```{r message= FALSE}
level_colors = c('Not detected' = '#ffffb2', 'Low' = '#fecc5c', 'Medium' = '#fd8d3c', 'High' = '#e31a1c')

pathology_subset %>%
  select(gene, cancer, high, medium, low, not_detected) %>%
  rename('High' = 'high', 'Medium' = 'medium', 'Low' = 'low', 'Not detected' = 'not_detected') %>%
  melt(measure.vars = c('High', 'Medium', 'Low', 'Not detected'),
       variable.name = 'level',
       value.name = 'patient_count') %>%
#  mutate(level = factor(level, levels = c('not_detected', 'low', 'medium', 'high'))) %>%
#  print() %>%
  ggplot(aes(x = gene, y = patient_count, fill = level)) +
    geom_bar(stat = 'identity', position = 'fill') +
    scale_x_discrete(limits = target_gene) +
    ylab('Patient portions') +
    scale_fill_manual(values = level_colors) +
#    scale_fill_brewer(palette = 'YlOrRd', direction = -1) +
    facet_wrap(~ cancer) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))
```




# Subsets for subcellular locations
Subcellular localization of proteins based on immunofluorescently stained cells. The tab-separated file includes the following columns: Ensembl gene identifier ("Gene"), name of gene ("Gene name"), gene reliability score ("Reliability"), enhanced locations ("Enhanced"), supported locations ("Supported"), Approved locations ("Approved"), uncertain locations ("Uncertain"), locations with single-cell variation in intensity ("Single-cell variation intensity"), locations with spatial single-cell variation ("Single-cell variation spatial"), locations with observed cell cycle dependency (type can be one or more of biological definition, custom data or correlation) ("Cell cycle dependency"), Gene Ontology Cellular Component term identifier ("GO id")

```{r}
subcellular_location_subset <- subcellular_location %>%
  filter(gene %in% target_gene) %>%
  mutate(location = strsplit(go_id, ';')) %>%
  unnest(location) %>%
  select(location, gene) %>%
  table() %>%
  print()
```

# Visualize locations

```{r}
subcellular_location_subset %>%
  as.tibble() %>%
  mutate(n = factor(n, levels = c('0', '1'))) %>%
  ggplot(aes(x = gene, y = location)) +
    geom_tile(aes(fill = n)) +
    scale_x_discrete(limits = target_gene) +
    scale_fill_manual(values = c('0' = 'white', '1' = 'black')) +
    theme(legend.position="none")
```

