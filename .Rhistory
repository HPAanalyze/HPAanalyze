devtools::use_package("xml2")
?devtools::install
person("Anh Nhat", "Tran", email = "trannhatanh89@gmail.com",
role = c("aut", "cre"))
devtools::check()
rJava
devtools::check()
roxygenize()
roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
?gather
??gather
roxygenise()
devtools::check()
devtools::use_package('tidyr')
devtools::check()
hpa_download <- function(download_list = 'histology') {
#generate a list of item to download
if(download_list == 'all') {
download_list <- c('Normal tissue',
'Pathology',
'Subcellular location',
'RNA tissue',
'RNA cell line',
'RNA transcript tissue',
'RNA transcript cell line')
} else if(download_list == 'histology') {
download_list <- c('Normal tissue',
'Pathology',
'Subcellular location')
} else if(download_list == 'rna') {
download_list <- c('RNA tissue',
'RNA cell line')
} else if(download_list == 'isoform') {
download_list <- c('RNA transcript tissue',
'RNA transcript cell line')
}
hpa_downloaded_data <- list() #initiate the list to be returned
# Check if the term is requested or not (all by default)
# then download the file
# then unzip and make a tibble out of data
# then add the tibble to the list
if('Normal tissue' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/normal_tissue.tsv.zip',
destfile = temp)
normal_tissue <- read_tsv(unz(temp, 'normal_tissue.tsv'))
unlink(temp)
colnames(normal_tissue) <- c('ensembl', 'gene', 'tissue',
'cell_type', 'level', 'reliability')
hpa_downloaded_data$normal_tissue <- normal_tissue
}
if('Pathology' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/pathology.tsv.zip',
destfile = temp)
pathology <- read_tsv(unz(temp, 'pathology.tsv'))
unlink(temp)
colnames(pathology) <- c('ensembl', 'gene', 'cancer', 'high', 'medium',
'low', 'not_detected', 'prognostic_favorable',
'unprognostic_favorable', 'prognostic_unfavorable',
'unprognostic_unfavorable')
hpa_downloaded_data$pathology <- pathology
}
if('Subcellular location' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/subcellular_location.tsv.zip',
destfile = temp)
subcellular_location <- read_tsv(unz(temp, 'subcellular_location.tsv'))
unlink(temp)
colnames(subcellular_location) <- c('ensembl', 'gene', 'reliability', 'enhanced',
'supported', 'approved', 'uncertain',
'single_cell_var_intensity',
'single_cell_var_spatial',
'cell_cycle_dependency', 'go_id')
hpa_downloaded_data$subcellular_location <- subcellular_location
}
if('Subcellular location' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/subcellular_location.tsv.zip',
destfile = temp)
subcellular_location <- read_tsv(unz(temp, 'subcellular_location.tsv'))
unlink(temp)
colnames(subcellular_location) <- c('ensembl', 'gene', 'reliability', 'enhanced',
'supported', 'approved', 'uncertain',
'single_cell_var_intensity',
'single_cell_var_spatial',
'cell_cycle_dependency', 'go_id')
hpa_downloaded_data$subcellular_location <- subcellular_location
}
if('RNA tissue' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/rna_tissue.tsv.zip',
destfile = temp)
rna_tissue <- read_tsv(unz(temp, 'rna_tissue.tsv'))
unlink(temp)
colnames(rna_tissue) <- c('ensembl', 'gene', 'tissue',
'value', 'unit')
hpa_downloaded_data$rna_tissue <- rna_tissue
}
if('RNA cell line' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/rna_celline.tsv.zip',
destfile = temp)
rna_cell_line <- read_tsv(unz(temp, 'rna_celline.tsv'))
unlink(temp)
colnames(rna_cell_line) <- c('ensembl', 'gene', 'cell_line',
'value', 'unit')
hpa_downloaded_data$rna_cell_line <- rna_cell_line
}
if('RNA transcript tissue' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/transcript_rna_tissue.tsv.zip',
destfile = temp)
transcript_rna_tissue <- read_tsv(unz(temp, 'transcript_rna_tissue.tsv'))
unlink(temp)
transcript_rna_tissue <- gather(data = transcript_rna_tissue,
key = 'tissue',
value = 'value',
-'ensgid', -'enstid')
colnames(transcript_rna_tissue) <- c('ensembl', 'transcript',
'tissue', 'value')
hpa_downloaded_data$transcript_rna_tissue <- transcript_rna_tissue
}
if('RNA transcript cell line' %in% download_list) {
temp <- tempfile()
download.file(url = 'https://www.proteinatlas.org/download/transcript_rna_celline.tsv.zip',
destfile = temp)
transcript_rna_cell_line <- read_tsv(unz(temp, 'transcript_rna_celline.tsv'))
unlink(temp)
transcript_rna_cell_line <- gather(data = transcript_rna_cell_line,
key = 'cell_line',
value = 'value',
-'ensgid', -'enstid')
colnames(transcript_rna_cell_line) <- c('ensembl', 'transcript',
'cell_line', 'value')
hpa_downloaded_data$transcript_rna_cell_line <- transcript_rna_cell_line
}
rm(temp)
return(hpa_downloaded_data)
}
hpa_download('isoform')
library('tidyr')
hpa_download('isoform')
devtools::check()
data <- hpa_download()
hpa_subset <- function(data,
target_gene = NULL,
target_tissue = NULL,
target_cell_type = NULL,
target_cancer = NULL,
target_cell_line = NULL) {
if('normal_tissue' %in% names(data)) {
if(!is.null(target_gene)) {
data$normal_tissue <- filter(data$normal_tissue, 'gene' %in% target_gene)
}
if(!is.null(target_tissue)) {
data$normal_tissue <- filter(data$normal_tissue, tissue %in% target_tissue)
}
if(!is.null(target_cell_type)) {
data$normal_tissue <- filter(data$normal_tissue, cell_type %in% target_cell_type)
}
}
if('pathology' %in% names(data)) {
if(!is.null(target_gene)) {
data$pathology <- filter(data$pathology, gene %in% target_gene)
}
if(!is.null(target_cancer)) {
data$pathology <- filter(data$pathology, cancer %in% target_cancer)
}
}
if('subcellular_location' %in% names(data)) {
if(!is.null(target_gene)) {
data$subcellular_location <- filter(data$subcellular_location, gene %in% target_gene)
}
}
if('rna_tissue' %in% names(data)) {
if(!is.null(target_gene)) {
data$rna_tissue <- filter(data$rna_tissue, gene %in% target_gene)
}
if(!is.null(target_tissue)) {
data$rna_tissue <- filter(data$rna_tissue, tissue %in% target_tissue)
}
}
if('rna_cell_line' %in% names(data)) {
if(!is.null(target_gene)) {
data$rna_cell_line <- filter(data$rna_cell_line, gene %in% target_gene)
}
if(!is.null(target_cell_line)) {
data$rna_cell_line <- filter(data$rna_cell_line, cell_line %in% target_cell_line)
}
}
return(data)
}
hpa_subset(data, 'GCH1')
hpa_subset <- function(data,
target_gene = NULL,
target_tissue = NULL,
target_cell_type = NULL,
target_cancer = NULL,
target_cell_line = NULL) {
gene <- NULL
if('normal_tissue' %in% names(data)) {
if(!is.null(target_gene)) {
data$normal_tissue <- filter(data$normal_tissue, gene %in% target_gene)
}
if(!is.null(target_tissue)) {
data$normal_tissue <- filter(data$normal_tissue, tissue %in% target_tissue)
}
if(!is.null(target_cell_type)) {
data$normal_tissue <- filter(data$normal_tissue, cell_type %in% target_cell_type)
}
}
if('pathology' %in% names(data)) {
if(!is.null(target_gene)) {
data$pathology <- filter(data$pathology, gene %in% target_gene)
}
if(!is.null(target_cancer)) {
data$pathology <- filter(data$pathology, cancer %in% target_cancer)
}
}
if('subcellular_location' %in% names(data)) {
if(!is.null(target_gene)) {
data$subcellular_location <- filter(data$subcellular_location, gene %in% target_gene)
}
}
if('rna_tissue' %in% names(data)) {
if(!is.null(target_gene)) {
data$rna_tissue <- filter(data$rna_tissue, gene %in% target_gene)
}
if(!is.null(target_tissue)) {
data$rna_tissue <- filter(data$rna_tissue, tissue %in% target_tissue)
}
}
if('rna_cell_line' %in% names(data)) {
if(!is.null(target_gene)) {
data$rna_cell_line <- filter(data$rna_cell_line, gene %in% target_gene)
}
if(!is.null(target_cell_line)) {
data$rna_cell_line <- filter(data$rna_cell_line, cell_line %in% target_cell_line)
}
}
return(data)
}
hpa_subset(data, 'GCH1')
hpa_subset <- function(data,
target_gene = NULL,
target_tissue = NULL,
target_cell_type = NULL,
target_cancer = NULL,
target_cell_line = NULL) {
## Just to pass the environment test in R CMD check
gene <- tissue <- cell_type <- cancer <- cell_line <- NULL
if('normal_tissue' %in% names(data)) {
if(!is.null(target_gene)) {
data$normal_tissue <- filter(data$normal_tissue, gene %in% target_gene)
}
if(!is.null(target_tissue)) {
data$normal_tissue <- filter(data$normal_tissue, tissue %in% target_tissue)
}
if(!is.null(target_cell_type)) {
data$normal_tissue <- filter(data$normal_tissue, cell_type %in% target_cell_type)
}
}
if('pathology' %in% names(data)) {
if(!is.null(target_gene)) {
data$pathology <- filter(data$pathology, gene %in% target_gene)
}
if(!is.null(target_cancer)) {
data$pathology <- filter(data$pathology, cancer %in% target_cancer)
}
}
if('subcellular_location' %in% names(data)) {
if(!is.null(target_gene)) {
data$subcellular_location <- filter(data$subcellular_location, gene %in% target_gene)
}
}
if('rna_tissue' %in% names(data)) {
if(!is.null(target_gene)) {
data$rna_tissue <- filter(data$rna_tissue, gene %in% target_gene)
}
if(!is.null(target_tissue)) {
data$rna_tissue <- filter(data$rna_tissue, tissue %in% target_tissue)
}
}
if('rna_cell_line' %in% names(data)) {
if(!is.null(target_gene)) {
data$rna_cell_line <- filter(data$rna_cell_line, gene %in% target_gene)
}
if(!is.null(target_cell_line)) {
data$rna_cell_line <- filter(data$rna_cell_line, cell_line %in% target_cell_line)
}
}
return(data)
}
hpa_subset(data, 'GCH1')
devtools::check()
devtools::run_examples()
devtools::run_examples()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
roxygenize()
roxygenize()
devtools::check()
devtools::check()
devtools::check()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck"
)
BiocCheck::BiocCheck('HPAanalyze')
rm(hpa_download())
rm(hpa_download)
rm(hpa_subset)
?hpa_download
stringi
library(stringi)
install.packages(stringi)
install.packages('stringi')
install.packages("stringi")
library(stringi)
?hpa_download
roxygen2::roxygenize()
?hpa_download
library(HPAanalyze)
devtools::document()
devtools::document()
roxygen2::roxygenize()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
?hpa_download
devtools::document()
devtools::document()
?hpa_download
devtools::document()
devtools::document()
devtools::document()
?hpa_download
devtools::document()
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::check()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
?hpa_download
devtools::document()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
hpa_list_param(data)
?hpa_list_param
?hpa_download
devtools::document()
devtools::check()
devtools::document()
?hpa_subset
devtools::check()
devtools::document()
devtools::check()
?hpa_subset
devtools::document()
devtools::check()
?hpa_export
devtools::document()
devtools::check()
?hpa_vis_tissue
downloaded_data <- hpa_download(download_list = 'Pathology')
hpa_list_param(data)
hpa_list_param(data)
hpa_list_param(downloaded_data)
gene_list <- c('TP53', 'EGFR')
cancer_list <- c('breast cancer', 'glioma', 'melanoma')
hpa_vis_tissue(data = downloaded_data,
target_gene = gene_list)
library(dplyr)
library(ggplot2)
gene_list <- c('TP53', 'EGFR')
cancer_list <- c('breast cancer', 'glioma', 'melanoma')
hpa_vis_tissue(data = downloaded_data,
target_gene = gene_list)
target_gene = gene_list)
hpa_vis_tissue(data = downloaded_data,
target_gene = gene_list)
devtools::document()
hpa_vis_tissue(data = downloaded_data,
target_gene = gene_list)
hpa_vis_pathology(data = downloaded_data,
target_gene = gene_list)
devtools::document()
hpa_vis_pathology()
hpa_vis_pathology
color_list <- c('white', 'red', 'green', 'blue')
plot <- hpa_vis_pathology(data = downloaded_data,
target_gene = gene_list,
target_cancer = cancer_list,
color = color_list,
custom_theme = TRUE)
plot + theme_minimal()
color_list <- c('yellow', 'red', 'green', 'blue')
plot <- hpa_vis_pathology(data = downloaded_data,
target_gene = gene_list,
target_cancer = cancer_list,
color = color_list,
custom_theme = TRUE)
plot + theme_minimal()
devtools::check()
downloaded_data <- hpa_download(download_list = 'Subcellular location')
downloaded_data <- hpa_download(download_list = 'Subcellular location')
gene_list <- c('TP53', 'EGFR')
gene_list <- c('TP53', 'EGFR', 'CD44')
hpa_vis_sebcell(data = downloaded_data,
target_gene = gene_list)
hpa_vis_subcell(data = downloaded_data,
target_gene = gene_list)
gene_list <- c('TP53', 'EGFR', 'CD44', 'PTEN', 'IDH1', 'IDH2')
hpa_vis_subcell(data = downloaded_data,
target_gene = gene_list)
gene_list <- c('TP53', 'EGFR', 'CD44', 'PTEN', 'IDH1', 'IDH2', 'CYCS')
hpa_vis_subcell(data = downloaded_data,
target_gene = gene_list)
color_list <- c('white', 'red')
plot <- hpa_vis_tissue(data = downloaded_data,
target_gene = gene_list,
color = color_list,
custom_theme = TRUE)
plot + theme_minimal()
color_list <- c('white', 'red')
plot <- hpa_vis_subcell(data = downloaded_data,
target_gene = gene_list,
color = color_list,
custom_theme = TRUE)
plot + theme_minimal()
}
devtools::document()
devtools::check()
devtools::document()
?hpa_download
hpa_get_xml('ENSG00000134057')
class(hpa_get_xml('ENSG00000134057'))
devtools::document()
devtools::check()
?hpa_get_xml
CCNB1_xml <- hpa_get_xml('ENSG00000134057')
hpa_xml_protein_classes(CCNB1_xml)
devtools::document()
?hpa_xml_protein_classes
hpa_xml_tissue_expression(CCNB1_xml)
devtools::document()
?hpa_xml_tissue_expression
roxygen2::roxygenise()
?hpa_xml_tissue_expr
devtools::check()
devtools::document()
hpa_downloaded_rna_v18 <- hpa_download('rna')
devtools::use_data(hpa_downloaded_rna_v18)
devtools::use_data(hpa_downloaded_rna_v18, compress = 'xz')
data("hpa_downloaded_rna_v18")
rm(hpa_downloaded_rna_v18)
data("hpa_downloaded_rna_v18")
summary(hpa_downloaded_rna_v18)
data("hpa_downloaded_histology_v18")
data("hpa_downloaded_rna_v18")
downloaded_data <- c(hpa_downloaded_histology_v18, hpa_downloaded_rna_v18)
sapply(downloaded_data, nrow)
gene_list <- c('TP53', 'EGFR', 'CD44', 'PTEN', 'IDH1', 'IDH2', 'CYCS')
tissue_list <- c('breast', 'cerebellum', 'skin 1')
cancer_list <- c('breast cancer', 'glioma', 'melanoma')
cell_line_list <- c('A-431', 'A549', 'AF22', 'AN3-CA')
subset_data <- hpa_subset(data = downloaded_data,
target_gene = gene_list,
target_tissue = tissue_list,
target_cancer = cancer_list,
target_cell_line = cell_line_list)
sapply(subset_data, nrow)
devtools::check()
devtools::check()
BiocCheck::BiocCheck('C:\\OneDrive\\Informatics\\HPAanalyze_0.99.0.tar.gz')
print('Please run the example below in your console.')
BiocCheck::BiocCheck('C:\\OneDrive\\Informatics\\HPAanalyze_0.99.0.tar.gz')
?hpa_get_xml
devtools::document()
?hpa_get_xml
BiocCheck::BiocCheck('C:\\OneDrive\\Informatics\\HPAanalyze_0.99.0.tar.gz')
BiocCheck::BiocCheck('C:\\OneDrive\\Informatics\\HPAanalyze_0.99.0.tar.gz')
devtools::check()
hpa_downloaded_isoform_v18 <- hpa_download('isoform')
